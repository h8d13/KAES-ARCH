#!/bin/bash
## Pacman and Arch derivatives , mean to be run with elevated priv.
TARGET_USER=hadean
KB_LAYOUT=us
# Variant can be left empty if using major keyboard v or ex: "nodeadkeys"
VARIANT=""
echo "Checking user..." 
## Check the target user is correct
if [ ! -d "/home/$TARGET_USER" ]; then
    echo "ERROR: Home directory for user '$TARGET_USER' does not exist. Exiting."
    exit 1
fi
########################################## Extras
echo "Setting up Extras..." 
# Update and check
if ! pacman -Sy; then
    echo "ERROR: Failed to sync package databases"
    exit 1
fi
#pacman -S --noconfirm intel-ucode #amd-ucode
## For you to add more stuff if needed. Uncomment and add packages seperated by " "
pacman -S --noconfirm tree less zip unzip rsync alsa-utils 
pacman -S --noconfirm python-gobject gtk4 libadwaita
#pacman -S --noconfirm helix micro fastfetch kdeconnect
########################################## DIRS
echo "Setting up Directories..." 
## Admin/User
mkdir -p "$HOME/.config"
mkdir -p "$HOME/.config/zsh"
mkdir -p "$HOME/.config/bash"
mkdir -p "$HOME/.local/bin"
## User only
mkdir -p "/home/$TARGET_USER/.local/share/konsole"
mkdir -p "/home/$TARGET_USER/.config/zsh"
mkdir -p "/home/$TARGET_USER/.config/bash"
########################################## KB Stuff
echo "Setting up Keyboards..." 
## Check if we need to include variant in the configuration
if [ -n "$VARIANT" ]; then
    VARIANT_CONFIG="VariantList=$VARIANT"
else
    VARIANT_CONFIG=""
fi
########################################## FIX GLOBAL KB
cat > "/home/$TARGET_USER/.config/kxkbrc" << EOF
[Layout]
LayoutList=$KB_LAYOUT
Use=True
EOF
## Only add VariantList if VARIANT is not empty
if [ -n "$VARIANT" ]; then
    echo "VariantList=$VARIANT" >> "/home/$TARGET_USER/.config/kxkbrc"
fi
########################################## FIX SDDM KB
mkdir -p "/usr/share/sddm/scripts/"
cat >> /usr/share/sddm/scripts/Xsetup << EOF
setxkbmap "$KB_LAYOUT"
EOF
chmod +x /usr/share/sddm/scripts/Xsetup
########################################## MORE Nice to haves
echo "Setting up Bonuses..." 
## Extended bonuses if you remove, remove corresponding code bellow
pacman -S --noconfirm zsh ufw 
## First part is for laptops to be on perf mode on charge.
ufw default deny incoming
ufw enable
########################################## KDE Config files
#pacman -S --noconfirm power-profiles-daemon 
#systemctl enable power-profiles-daemon.service
echo "Setting up KDE Config..." 
#CONFIG_FILE="/home/$TARGET_USER/.config/powerdevilrc"
#cat <<EOF > $CONFIG_FILE
#[AC][Performance]
#PowerProfile=performance
#EOF

## Cool prepend move totally useless file doesnt exist yet but it's cool ya know
CONFIG_FILE2="/home/$TARGET_USER/.config/ksmserverrc"
TMP_FILE="$(mktemp)"
echo -e "[General]\nloginMode=emptySession" > "$TMP_FILE"
cat "$CONFIG_FILE2" >> "$TMP_FILE" 2>/dev/null # ignore not exist error idk 
mv "$TMP_FILE" "$CONFIG_FILE2"
CONFIG_FILE3="/home/$TARGET_USER/.config/kscreenlockerrc"
cat <<EOF > $CONFIG_FILE3
[Daemon]
LockGrace=300
Timeout=30
EOF
########################################## CREATE THE KONSOLE PROFILES
echo "Setting up Konsole..." 
cat > "/home/$TARGET_USER/.config/konsolerc" << EOF
[Desktop Entry]
DefaultProfile=$TARGET_USER.profile
EOF
## Set default Konsole + Settings
cat > "/home/$TARGET_USER/.local/share/konsole/$TARGET_USER.profile" << EOF
[General]
Command=zsh
Name=$TARGET_USER
Parent=FALLBACK/
EOF
## Root shell
cat > "/home/$TARGET_USER/.local/share/konsole/root.profile" << EOF
[General]
Command=su -l -c 'zsh'  
Name=root
Parent=FALLBACK/
EOF
########################################## Custom Localbin
echo "Setting up Localbin..." 
## Add local bin to PATH if it exists
cat > "$HOME/.config/environment" << 'EOF'
if [ -d "$HOME/.local/bin" ]; then
    export PATH="$HOME/.local/bin:$PATH"
fi
EOF
########################################## Example Script: Called "iapps" To search in installed packages. 
cat > ~/.local/bin/iapps << 'EOF'
#!/bin/sh
# this script lets you search your installed packages easily
if [ -z "$1" ]; then
    echo "Missing search term"
    exit 1
fi
pacman -Qs "$1"
EOF
## Make it executable ### Can now be called simply as iapps git
chmod +x ~/.local/bin/iapps
########################################## SHARED (BASH & ZSH) ALIASES
echo "Setting up aliases..." 
cat > "$HOME/.config/aliases" << EOF
alias comms="cat ~/.config/aliases | sed 's/alias//g'"
alias ecomms="vim ~/.config/aliases"
alias syncusr="cp ~/.config/aliases /home/$TARGET_USER/.config/aliases"
alias srcall=". ~/.config/aliases"
alias topac="vim /etc/pacman.conf"
# Base alias
alias cdu="cd /home/$TARGET_USER/"
alias aus="su $TARGET_USER" 
# Utils alias
alias wztree="du -h / | sort -rh | head -n 30 | less"
alias wzhere="du -h . | sort -rh | head -n 30 | less"
alias genpw="head /dev/urandom | tr -dc A-Za-z0-9 | head -c 21; echo"
alias logd="journalctl -f" 
alias logds="dmesg -r"
alias birth="stat /"
# Pac alias
alias updapc="pacman -Syu"
alias apklean="pacman -Sc"
alias apka="pacman -S"
alias apkd="pacman -R"
alias apks="pacman -Ss"
# Practical alias
alias sudo='sudo ' # crucial
alias clr="clear"
alias cls="clr"
alias ls='ls --color=auto'
alias ll='ls --color=auto -la'
alias la='ls --color=auto -a'
alias l='ls --color=auto -CF'
EOF
########################################## BASH CONFIGURATION
echo "Setting up Bash..." 
cat > "$HOME/.config/bash/bashrc" << 'EOF'
# === Custom Bash Prompt Blue ===
export PS1='\[\033[1;34m\]┌──[\[\033[0;36m\]\A\[\033[1;34m\]]─[\[\033[0m\]\u\[\033[1;34m\]@\[\033[0;36m\]\h\[\033[1;34m\]]─[\[\033[0;32m\]\w\[\033[1;34m\]]\n\[\033[1;34m\]└──╼ \[\033[0;36m\]$ \[\033[0m\]'

# === Source common aliases ===
if [ -f "$HOME/.config/aliases" ]; then
    . "$HOME/.config/aliases"
fi

# === Source environment file ===
if [ -f "$HOME/.config/environment" ]; then
    . "$HOME/.config/environment"
fi
EOF
touch "$HOME/.bashrc"
echo '. "$HOME/.config/bash/bashrc"' >> "$HOME/.bashrc"
########################################## ZSH 
echo "Setting up ZSH..." 
# Install ZSH plugins via package manager instead of git
pacman -S --noconfirm zsh-autosuggestions \
                      zsh-syntax-highlighting

# === Create ~/.config/zsh/zshrc ===
cat > "$HOME/.config/zsh/zshrc" << 'EOF'
# === Load Extra Completions ===
if [ -d "/usr/share/zsh/site-functions" ]; then
    fpath+=("/usr/share/zsh/site-functions")
fi

# === History Configuration ===
HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.zsh_history

# === Source Zsh Plugins (with error checking) ===
# Load autosuggestions and history-substring-search first
if [ -f "/usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh" ]; then
    . "/usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh"
else
    echo "Warning: zsh-autosuggestions plugin not found"
fi

# Load syntax-highlighting last as recommended
if [ -f "/usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" ]; then
    . "/usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
else
    echo "Warning: zsh-syntax-highlighting plugin not found"
fi

# === Custom Zsh Prompt Red ===
export PROMPT='%F{red}┌──[%F{cyan}%D{%H:%M}%F{red}]─[%F{default}%n%F{red}@%F{cyan}%m%F{red}]─[%F{green}%~%F{red}]
%F{red}└──╼ %F{cyan}$ %f'

# === Source common aliases ===
if [ -f "$HOME/.config/aliases" ]; then
    . "$HOME/.config/aliases"
fi

# === Source environment file ===
if [ -f "$HOME/.config/environment" ]; then
    . "$HOME/.config/environment"
fi
EOF
## Add source line
touch "$HOME/.zshrc"
echo '. "$HOME/.config/zsh/zshrc"' >> "$HOME/.zshrc"
## Add to shells
grep -qxF '/usr/bin/zsh' /etc/shells || echo '/usr/bin/zsh' >> /etc/shells

########################################## USER SHELL SETUP
echo "Setting up user shell configurations..."

# Copy shell configs to user
cp "$HOME/.config/zsh/zshrc" "/home/$TARGET_USER/.config/zsh/zshrc"
cp "$HOME/.config/bash/bashrc" "/home/$TARGET_USER/.config/bash/bashrc"
cp "$HOME/.config/aliases" "/home/$TARGET_USER/.config/aliases"
cp "$HOME/.config/environment" "/home/$TARGET_USER/.config/environment"

# Create user's shell rc files
touch "/home/$TARGET_USER/.zshrc"
echo '. "$HOME/.config/zsh/zshrc"' >> "/home/$TARGET_USER/.zshrc"

touch "/home/$TARGET_USER/.bashrc"
echo '. "$HOME/.config/bash/bashrc"' >> "/home/$TARGET_USER/.bashrc"

# Set user's default shell to zsh
chsh -s /usr/bin/zsh $TARGET_USER

########################################## PacToPac
echo "Setting up Github/K2..." 
git clone https://github.com/h8d13/PacToPac /tmp/PacToPac
mv /tmp/PacToPac /home/$TARGET_USER/Desktop/k2-os/
rm -rf /tmp/PacToPac

# Fix ownership after copying
chown -R $TARGET_USER:$TARGET_USER /home/$TARGET_USER/
########################################## SYSTEM HARDENING
echo "Setting up Security fixes..." 
ufw allow out 443/tcp  # https
ufw allow 22/tcp	       # sftp/ssh

## Not a router stuff / Others
cat > /etc/sysctl.d/99-custom-harden.conf << 'EOF'
# Network performance and security
net.core.rmem_max = 16777216
net.core.wmem_max = 16777216
net.ipv4.tcp_rmem = 4096 87380 16777216
net.ipv4.tcp_wmem = 4096 65536 16777216
net.ipv4.tcp_congestion_control = bbr
net.ipv4.tcp_fastopen = 3
net.ipv4.tcp_mtu_probing = 1
net.core.default_qdisc = fq
net.ipv4.tcp_window_scaling = 1
net.ipv4.tcp_timestamps = 1
net.ipv4.tcp_sack = 1

# Security settings
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.default.rp_filter = 1
net.ipv4.tcp_syncookies = 1
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.secure_redirects = 0
net.ipv4.conf.default.secure_redirects = 0

# Enable IPv6 privacy extensions
net.ipv6.conf.all.use_tempaddr = 2
net.ipv6.conf.default.use_tempaddr = 2

# Process security
kernel.dmesg_restrict = 1
kernel.kptr_restrict = 2
kernel.yama.ptrace_scope = 1

# Performance tweaks
kernel.sched_autogroup_enabled = 0

# Memory management
vm.swappiness = 10
vm.vfs_cache_pressure = 50
vm.dirty_ratio = 15
vm.dirty_background_ratio = 5
EOF

## Apply settings
sysctl --system >/dev/null 2>&1
