#!/bin/bash
## Pacman and Arch derivatives , mean to be run with elevated priv.
#set -e ## Exit on error debug
## Config
DTHEME=dark
## dark/light
KB_LAYOUT=us
VARIANT=""
# Variant can be left empty if using major keyboard v or for e.g nodeadkeys
TARGET_USER="$SUDO_USER"
# Guest section
CREATE_GUEST=false
GUEST_PASSWORD=""
# Optional guest password (leave empty for no password) 
USERNAME="guest"
DISPLAY_NAME="Guest"

# Create guest user (set to true/false) No access to your files or sudo. But has access to same apps. Empty password. 
# Auto-generated, don't touch bellow

SCRIPT_DIR="$(pwd)"
LOG_FILE="$SCRIPT_DIR/install-$(date +%Y%m%d).log"
info() { printf "\033[32m[INFO]\033[0m %s\n" "$*"; }
die() { printf "\033[31m[ERROR]\033[0m %s\n" "$*"; exit 1; }
exec > >(tee -a "$LOG_FILE")
exec 2>&1

# Print configuration variables
echo "Configuration:"
info "SUDO_USER: $TARGET_USER"
info "DTHEME=$DTHEME"
info "KB_LAYOUT=$KB_LAYOUT"
info "VARIANT=$VARIANT"
info "CREATE_GUEST=$CREATE_GUEST"
info "SCRIPT_DIR=$SCRIPT_DIR"
echo ""

# Confirmation prompt
read -p "Continue with these settings? (y/N): " -n 1 -r
echo
if [ "$REPLY" != "y" ] && [ "$REPLY" != "Y" ]; then
  die "Aborted."
  exit 1
fi
echo ""

info "Checking target user..." 
## Check the target user is correct
if [ ! -d "/home/$TARGET_USER" ]; then
    die "Home directory for user '$TARGET_USER' does not exist"
    exit 1
fi
# Check if running as root
info "Checking elevated privileges..." 
if [ "$EUID" -ne 0 ]; then
    die "This script must be run as root"
    exit 1
fi
info "Checking pacman access..." 
if ! pacman -Sy; then
    die "Failed to sync package databases"
    exit 1
fi
########################################## Extras: Please configure me
info "Setting up extras..." 
# Update and check
#pacman -S --noconfirm intel-ucode #amd-ucode
## For you to add more stuff if needed. Uncomment and add packages seperated by " "
pacman -S --noconfirm tree less zip unzip rsync alsa-utils python-gobject
#pacman -S --noconfirm helix micro fastfetch kdeconnect firefox gnome-disk-utility gnome-2048 
## For you to rem stuff if needed
#pacman -R --noconfirm  kate kate-common
########################################## DIRS
info "Setting up Dirs..." 
## Admin/User
mkdir -p "$HOME/.config"
mkdir -p "$HOME/.config/zsh"
mkdir -p "$HOME/.config/bash"
mkdir -p "$HOME/.local/bin"
## User only
mkdir -p "/home/$TARGET_USER/.local/share/konsole"
mkdir -p "/home/$TARGET_USER/.config/zsh"
mkdir -p "/home/$TARGET_USER/.config/bash"
mkdir -p "/home/$TARGET_USER/.local/bin"

#mkdir -p "/home/$TARGET_USER/Work" && echo -e "[Desktop Entry]\nIcon=folder-script" > "/home/$TARGET_USER/Work"
##Optional home folders with icons
########################################## Check if we have a KB variant
info "Setting up KBs..." 
## Check if we need to include variant in the configuration
if [ -n "$VARIANT" ]; then
    VARIANT_CONFIG="VariantList=$VARIANT"
else
    VARIANT_CONFIG=""
fi
########################################## FIX GLOBAL KB
cat > "/home/$TARGET_USER/.config/kxkbrc" << EOF
[Layout]
LayoutList=$KB_LAYOUT
Use=True
EOF
## Only add VariantList if VARIANT is not empty
if [ -n "$VARIANT" ]; then
    echo "VariantList=$VARIANT" >> "/home/$TARGET_USER/.config/kxkbrc"
fi
########################################## FIX SDDM KB
mkdir -p "/usr/share/sddm/scripts/"
cat >> /usr/share/sddm/scripts/Xsetup << EOF
setxkbmap "$KB_LAYOUT"
EOF
chmod +x /usr/share/sddm/scripts/Xsetup
########################################## UFW
info "Setting up UFW..." 
pacman -S --noconfirm ufw 
ufw default deny incoming
ufw allow out 443/tcp  # https
ufw allow 22/tcp           # sftp/ssh
ufw enable
########################################## Power profiles
info "Setting up Power..." 
if cat /sys/class/power_supply/BAT*/present 2>/dev/null | grep -q 1; then
    info "Detected laptop - configuring power management..."
    pacman -S --noconfirm power-profiles-daemon 
    systemctl enable power-profiles-daemon.service
    CONFIG_FILE="/home/$TARGET_USER/.config/powerdevilrc"
    cat <<EOF > $CONFIG_FILE
[AC][Performance]
PowerProfile=performance
EOF
else 
    info "Detected desktop/server - skipping..."
fi
########################################## KDE Config files
info "Setting up Sessions/Krunner/Lockout..." 
cat > "/home/$TARGET_USER/.config/ksmserverrc" << 'EOF'
[General]
loginMode=emptySession
EOF
cat > "/home/$TARGET_USER/.config/kscreenlockerrc" << 'EOF'
[Daemon]
LockGrace=300
Timeout=30
EOF
cat > "/home/$TARGET_USER/.config/krunnerrc" << 'EOF'
[Plugins]
krunner_appstreamEnabled=false
krunner_webshortcutsEnabled=false

[Plugins][Favorites]
plugins=krunner_services,krunner_systemsettings
EOF
########################################## CREATE THE KONSOLE PROFILES
info "Setting up Konsoles..." 
# Install ZSH + plugins
pacman -S --noconfirm zsh \
                      zsh-autosuggestions \
                      zsh-syntax-highlighting \
                      bash-completion

#chsh -s /usr/bin/zsh $TARGET_USER
## Uncomment above if you want built-in to be zsh
## Add to shells
grep -qxF '/usr/bin/zsh' /etc/shells || echo '/usr/bin/zsh' >> /etc/shells

cat > "/home/$TARGET_USER/.config/konsolerc" << EOF
[Desktop Entry]
DefaultProfile=$TARGET_USER.profile
EOF
## Set default Konsole : Can use bash if prefered. Change command=
cat > "/home/$TARGET_USER/.local/share/konsole/$TARGET_USER.profile" << EOF
[General]
Command=zsh
Name=$TARGET_USER
Parent=FALLBACK/
EOF
## Root login shell
cat > "/home/$TARGET_USER/.local/share/konsole/root.profile" << EOF
[General]
Command=su -l -c 'zsh'  
Name=root
Parent=FALLBACK/
EOF
########################################## Dolphin context menus
info "Setting up Dolphin..." 
cat > "/usr/share/kio/servicemenus/konsolerunsudo.desktop" << EOF
[Desktop Entry]
Type=Service
X-KDE-ServiceTypes=KonqPopupMenu/Plugin
MimeType=application/x-executable;
Actions=runInKonsoleSudo;
X-KDE-AuthorizeAction=shell_access

[Desktop Action runInKonsoleSudo]
Name=Run In Root Konsole
Icon=utilities-terminal
Exec=konsole -e bash -c 'sudo "%f"; sudo -s'
EOF
chmod +x /usr/share/kio/servicemenus/konsolerunsudo.desktop

cat > "/usr/share/kio/servicemenus/konsolediroot.desktop" << EOF
[Desktop Entry]
Type=Service
X-KDE-ServiceTypes=KonqPopupMenu/Plugin
MimeType=inode/directory;
Actions=openRootTerminal;
X-KDE-AuthorizeAction=shell_access

[Desktop Action openRootTerminal]
Name=Open Root Terminal Here
Icon=utilities-terminal
Exec=konsole --workdir %f -e sudo -s
EOF
chmod +x /usr/share/kio/servicemenus/konsolediroot.desktop

cat > "/usr/share/kio/servicemenus/createdesktopshortcut.desktop" << 'EOF'
[Desktop Entry]
Type=Service
X-KDE-ServiceTypes=KonqPopupMenu/Plugin
MimeType=application/x-executable;
Actions=createDesktopShortcut;

[Desktop Action createDesktopShortcut]
Name=Create Desktop Shortcut
Icon=application-x-desktop
Exec=sh -c 'echo "[Desktop Entry]\nType=Application\nName=$(basename "%f")\nName[en_US]=$(basename "%f")\nGenericName=\nGenericName[en_US]=\nExec=%f\nIcon=application-x-executable\nMimeType=\nPath=\nStartupNotify=true\nTerminal=false\nTerminalOptions=\nX-KDE-SubstituteUID=false\nX-KDE-Username=" > "$HOME/Desktop/$(basename "%f").desktop"; chmod +x "$HOME/Desktop/$(basename "%f").desktop"'
EOF
chmod +x /usr/share/kio/servicemenus/createdesktopshortcut.desktop 

## Modify the existing "Run in Konsole" to a better command:
sed -i 's|^Exec=konsole.*|Exec=konsole --hold -e bash -c '\''"%f"; exec $SHELL'\''|' /usr/share/kio/servicemenus/konsolerun.desktop
########################################## Custom Localbin
info "Setting up Localbin..." 
## Add local bin to PATH if it exists
cat > "$HOME/.config/environment" << 'EOF'
if [ -d "$HOME/.local/bin" ]; then
    export PATH="$HOME/.local/bin:$PATH"
fi
EOF
########################################## Example script iapps search in installed packages. 
cat > "$HOME/.local/bin/iapps" << 'EOF'
#!/bin/sh
# this script lets you search your installed packages easily
if [ -z "$1" ]; then
    echo "Missing search term"
    exit 1
fi
pacman -Qs "$1"
EOF
chmod +x "$HOME/.local/bin/iapps"
########################################## SHARED (BASH & ZSH) ALIASES
info "Setting up Aliases..." 
cat > "$HOME/.config/aliases" << EOF
alias comms="cat ~/.config/aliases | sed 's/alias//g'"
alias ecomms="vim ~/.config/aliases"
alias srcall=". ~/.config/aliases"
alias topac="vim /etc/pacman.conf"
# Root alias
alias cdu="cd /home/$TARGET_USER/"
alias aus="su $TARGET_USER" 
# Utils alias
alias wztree="du -h / | sort -rh | head -n 30 | less"
alias wzhere="du -h . | sort -rh | head -n 30 | less"
alias genpw="head /dev/urandom | tr -dc A-Za-z0-9 | head -c 21; echo"
alias logd="journalctl -f" 
alias logds="dmesg -r"
alias birth="stat /"
# Pac alias
alias updapc="pacman -Syu"
alias apklean="pacman -Sc"
alias apkorph="pacman -Rns $(pacman -Qdtq)"
alias manypk="pacman -Q | wc -l"
alias apklast="ls -lt --time=mtime /var/lib/pacman/local/ | grep '^d' | awk '{for (i=6; i<=NF; i++) printf \$i\" \"; print \"\"}' | sed 's/ \$//' | head -n 10"
alias apka="pacman -S"
alias apkd="pacman -R"
alias apks="pacman -Ss"
# Practical alias
alias sudo='sudo '
alias clr="clear"
alias cls="clr"
alias ls='ls --color=auto'
alias ll='ls --color=auto -la'
alias la='ls --color=auto -a'
alias l='ls --color=auto -CF'
EOF
########################################## BASH CONFIGURATION
info "Setting up Bash..." 
cat > "$HOME/.config/bash/bashrc" << 'EOF'
# === Custom Bash Prompt Blue ===
export PS1='\[\033[1;34m\]┌──[\[\033[0;36m\]\A\[\033[1;34m\]]─[\[\033[0m\]\u\[\033[1;34m\]@\[\033[0;36m\]\h\[\033[1;34m\]]─[\[\033[0;32m\]\w\[\033[1;34m\]]\n\[\033[1;34m\]└──╼ \[\033[0;36m\]$ \[\033[0m\]'

# === Source common aliases ===
if [ -f "$HOME/.config/aliases" ]; then
    . "$HOME/.config/aliases"
fi

# === Source environment file ===
if [ -f "$HOME/.config/environment" ]; then
    . "$HOME/.config/environment"
fi
# === Enable bash completion ===                                                 
if [ -f /usr/share/bash-completion/bash_completion ]; then                    
    . /usr/share/bash-completion/bash_completion 
fi
EOF
touch "$HOME/.bashrc"
echo '. "$HOME/.config/bash/bashrc"' >> "$HOME/.bashrc"
########################################## ZSH 
info "Setting up ZSH..." 
cat > "$HOME/.config/zsh/zshrc" << 'EOF'
# === Load Extra Completions ===
if [ -d "/usr/share/zsh/site-functions" ]; then
    fpath+=("/usr/share/zsh/site-functions")
fi

# === History Configuration ===
HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.zsh_history

# === Source Zsh Plugins (with error checking) ===
# Load autosuggestions and history-substring-search first
if [ -f "/usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh" ]; then
    . "/usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh"
else
    echo "Warning: zsh-autosuggestions plugin not found"
fi

# Load syntax-highlighting last as recommended
if [ -f "/usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" ]; then
    . "/usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
else
    echo "Warning: zsh-syntax-highlighting plugin not found"
fi

# === Custom Zsh Prompt Red ===
export PROMPT='%F{red}┌──[%F{cyan}%D{%H:%M}%F{red}]─[%F{default}%n%F{red}@%F{cyan}%m%F{red}]─[%F{green}%~%F{red}]
%F{red}└──╼ %F{cyan}$ %f'

# === Source common aliases ===
if [ -f "$HOME/.config/aliases" ]; then
    . "$HOME/.config/aliases"
fi

# === Source environment file ===
if [ -f "$HOME/.config/environment" ]; then
    . "$HOME/.config/environment"
fi
EOF
## Add source line
touch "$HOME/.zshrc"
echo '. "$HOME/.config/zsh/zshrc"' >> "$HOME/.zshrc"
########################################## USER SHELL SETUP
info "Setting up Root..."
# Copy shell configs to user
cp "$HOME/.config/zsh/zshrc" "/home/$TARGET_USER/.config/zsh/zshrc"
cp "$HOME/.config/bash/bashrc" "/home/$TARGET_USER/.config/bash/bashrc"
cp "$HOME/.config/aliases" "/home/$TARGET_USER/.config/aliases"
cp "$HOME/.config/environment" "/home/$TARGET_USER/.config/environment"

# Create local bin for usr
cp "$HOME/.local/bin/iapps" "/home/$TARGET_USER/.local/bin/iapps"

# Create user's shell rc files
touch "/home/$TARGET_USER/.zshrc"
echo '. "$HOME/.config/zsh/zshrc"' >> "/home/$TARGET_USER/.zshrc"

touch "/home/$TARGET_USER/.bashrc"
echo '. "$HOME/.config/bash/bashrc"' >> "/home/$TARGET_USER/.bashrc"
########################################## PacToPac
info "Setting up Github/K2..." 
pacman -S --noconfirm gtk4 libadwaita
git clone https://github.com/h8d13/PacToPac /tmp/PacToPac
mv /tmp/PacToPac $SCRIPT_DIR/k2-os/
rm -rf /tmp/PacToPac

cat > "/home/$TARGET_USER/Desktop/PACTOPAC.desktop" << EOF
[Desktop Entry]
Categories=System;PackageManager;
Comment=Suckless Arch Linux package manager
Exec=sudo -b python3 $SCRIPT_DIR/k2-os/main.py; exit
Icon=package-x-generic
Name[en_US]=PAC2PAC
Name=PAC2PAC
StartupNotify=true
Terminal=true
Type=Application
EOF

# Fix ownership all files recursively
chown -R $TARGET_USER:$TARGET_USER /home/$TARGET_USER/
########################################## User visual settings
info "Setting up KDE theme..."
# Run as target user, not root 
sudo -u $TARGET_USER bash << EOF
# Apply theme based on DTHEME setting
if [ "$DTHEME" = "light" ]; then
    plasma-apply-desktoptheme breeze >/dev/null 2>&1
    plasma-apply-colorscheme BreezeLight >/dev/null 2>&1
    kwriteconfig6 --file kdeglobals --group "General" --key "ColorScheme" "BreezeLight"
    kwriteconfig6 --file kdeglobals --group "KDE" --key "LookAndFeelPackage" "org.kde.breeze.desktop"
    WALLPAPER="/usr/share/wallpapers/Mountain/contents/images/5120x2880.png"
else
    plasma-apply-desktoptheme breeze-dark >/dev/null 2>&1
    plasma-apply-colorscheme BreezeDark >/dev/null 2>&1
    kwriteconfig6 --file kdeglobals --group "General" --key "ColorScheme" "BreezeDark"
    kwriteconfig6 --file kdeglobals --group "KDE" --key "LookAndFeelPackage" "org.kde.breezedark.desktop"
    WALLPAPER="/usr/share/wallpapers/Mountain/contents/images_dark/5120x2880.png"
fi

kwriteconfig6 --file plasma-org.kde.plasma.desktop-appletsrc \
  --group "Containments" --group "2" --group "Applets" --group "5" --group "Configuration" --group "General" \
  --key "launchers" "applications:org.kde.konsole.desktop"
kwriteconfig6 --file plasma-org.kde.plasma.desktop-appletsrc \
  --group "Containments" --group "1" --group "Wallpaper" --group "org.kde.image" --group "General" \
  --key "Image" "\$WALLPAPER"
kwriteconfig6 --file plasma-org.kde.plasma.desktop-appletsrc --group "Containments" --group "2" --group "Applets" \ 
  --group "3" --group "Configuration" --group "General" \
  --key "icon"  "$SCRIPT_DIR/assets/logo.png"
EOF
########################################## GUEST USER SETUP
if [ "$CREATE_GUEST" = "true" ]; then
    info "Setting up guest User..." 
    # Check if user already exists
    if id "$USERNAME" &>/dev/null; then
        info "User $USERNAME already exists. Skipping creation."
    else
        # Create user without home directory first
        useradd -c "$DISPLAY_NAME" -s /bin/bash "$USERNAME" 
        # Can use rbash for more restrictive setup
        
        # Add to necessary groups for KDE functionality
        usermod -aG audio,video,games,power,optical,storage,scanner,lp,network "$USERNAME"
        
        # Set password (empty or custom)
        if [ -z "$GUEST_PASSWORD" ]; then
            passwd -d "$USERNAME"
            info "Guest user created with no password"
        else
            echo "$USERNAME:$GUEST_PASSWORD" | chpasswd
            info "Guest user created with custom password"
        fi
        
        # Clone entire home directory
        info "Cloning $TARGET_USER home directory to guest..."
        cp -r "/home/$TARGET_USER" "/home/$USERNAME"
        
        # Fix ownership
        chown -R "$USERNAME:$USERNAME" "/home/$USERNAME"
        chmod 755 "/home/$USERNAME"
        
        info "Guest user setup complete with cloned home directory"
    fi
fi
########################################## User SDDM visual settings
info "Setting up login SDDM..."
mkdir -p /etc/sddm.conf.d

cat > /etc/sddm.conf.d/kde_settings.conf << EOF
[Autologin]
Relogin=false
Session=
User=

[General]
HaltCommand=/usr/bin/systemctl poweroff
RebootCommand=/usr/bin/systemctl reboot

[Theme]
Current=breeze
CursorTheme=breeze_cursors
Font=Noto Sans,10,-1,0,400,0,0,0,0,0,0,0,0,0,0,1
Background=$WALLPAPER

[Users]
MaximumUid=60513
MinimumUid=1000
EOF
mkdir -p /var/lib/sddm/.config
cp "/home/$TARGET_USER/.config/kdeglobals" /var/lib/sddm/.config/ 2>/dev/null || echo "kdeglobals not found, using defaults"
chown -R sddm:sddm /var/lib/sddm/.config 2>/dev/null || true
########################################## SYSTEM HARDENING
info "Setting up Security..." 
## Not a router stuff / Others
cat > /etc/sysctl.d/99-custom-harden.conf << 'EOF'
# Network performance and security
net.core.rmem_max = 16777216
net.core.wmem_max = 16777216
net.ipv4.tcp_rmem = 4096 87380 16777216
net.ipv4.tcp_wmem = 4096 65536 16777216
net.ipv4.tcp_congestion_control = bbr
net.ipv4.tcp_fastopen = 3
net.ipv4.tcp_mtu_probing = 1
net.core.default_qdisc = fq
net.ipv4.tcp_window_scaling = 1
net.ipv4.tcp_timestamps = 1
net.ipv4.tcp_sack = 1

# Security settings
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.default.rp_filter = 1
net.ipv4.tcp_syncookies = 1
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.secure_redirects = 0
net.ipv4.conf.default.secure_redirects = 0

# Enable IPv6 privacy extensions
net.ipv6.conf.all.use_tempaddr = 2
net.ipv6.conf.default.use_tempaddr = 2

# Process security
kernel.dmesg_restrict = 1
kernel.kptr_restrict = 2
kernel.yama.ptrace_scope = 1

# Performance tweaks
kernel.sched_autogroup_enabled = 0

# Memory management
vm.swappiness = 10
vm.vfs_cache_pressure = 50
vm.dirty_ratio = 15
vm.dirty_background_ratio = 5
EOF

## Apply settings
sysctl --system >/dev/null 2>&1
########################################## Exit reboot
info "ALL DONE! Welcome."
info "Install completed successfully at $(date)" >> "$LOG_FILE"
info "Log saved to: $LOG_FILE"
echo ""
read -p "Installation complete! Reboot now? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    info "Rebooting in 3 seconds..."
    sleep 3
    reboot
else
    info "Reboot skipped. Please reboot manually or 'systemctl restart sddm'."
fi
