#!/bin/bash
## Pacman and Arch derivatives , mean to be run with elevated priv.
#set -e ## Exit on error debug
## Config
# Variant can be left empty if using major keyboard v or for e.g nodeadkeys
LG_PACKS=""
# Uncomment language packs as needed (adds to installation about):
#LG_PACKS+=" noto-fonts-cjk"         # Chinese, Japanese, Korean
#LG_PACKS+=" noto-fonts-extra"       # Arabic, Hebrew, Greek, Cyrillic, Thai, certain LaTex/Music + bold, light, etc... extended symbols

# -emoji and noto-fonts standard already included in plasma

# For you to add/rem stuff
ADD_PKGS="micro firefox" ## kdeconnect xclip gnome-disk-utility gnome-2048 
REM_PKGS="gnome-tour"
# Can be empty, also cannot break gnome deps
# Examples you can remove too: 'nano, vim, htop, git'
ADD_FP="" # io.missioncenter.MissionCenter app.zen_browser.zen com.spotify.Client
# Can visit flathub to check names

# Guest section
CREATE_GUEST=false
#### Not used if false above
GUEST_USE_PASSWORD=true
# Set GUEST_USE_PASSWORD=true to prompt for password, false for no password 
GUEST_SUDO=true
# Set GUEST_SUDO=true to allow sudo access (only works when GUEST_USE_PASSWORD=true)
GUEST_SHELL="/bin/bash"
# Guest shell: "/bin/bash", "/bin/rbash", "/bin/zsh", etc. rbash is heavily restricted
USERNAME="guest"

### Auto-generated + Colored output + Log + Info prints DONT EDIT HERE UNLESS YOU KNOW WHAT DOINK
TARGET_USER="$SUDO_USER"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LOG_FILE="$SCRIPT_DIR/install-$(date +%Y%m%d).log"
info() { printf "\033[32m[INFO]\033[0m %s\n" "$*"; }
die() { printf "\033[31m[ERROR]\033[0m %s\n" "$*"; exit 1; }

### Detect distro and init system
detect_distro() {
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        echo "$ID"
    else
        echo "unknown"
    fi
}

detect_init() {
    if [ -d /run/systemd/system ]; then
        echo "systemd"
    elif [ -f /sbin/openrc ] || [ -f /usr/bin/openrc ]; then
        echo "openrc"
    elif [ -f /sbin/runit-init ] || [ -d /run/runit ]; then
        echo "runit"
    elif [ -f /sbin/dinit ] || [ -f /usr/bin/dinitctl ]; then
        echo "dinit"
    elif [ -f /sbin/s6-svscan ] || [ -d /run/s6 ]; then
        echo "s6"
    elif readlink /proc/1/exe 2>/dev/null | grep -q systemd; then
        echo "systemd"
    elif readlink /proc/1/exe 2>/dev/null | grep -q openrc; then
        echo "openrc"
    else
        echo "unknown"
    fi
}

# Service management wrapper
enable_service() {
    local service=$1
    case "$INIT_SYSTEM" in
        systemd)
            systemctl enable "$service"
            ;;
        openrc)
            rc-update add "$service" default
            ;;
        runit)
            ln -s "/etc/runit/sv/$service" /run/runit/service/
            ;;
        s6)
            s6-rc-bundle-update add default "$service"
            ;;
        dinit)
            dinitctl enable "$service"
            ;;
        *)
            info "Unknown init system, skipping enable for $service"
            ;;
    esac
}

restart_service() {
    local service=$1
    case "$INIT_SYSTEM" in
        systemd)
            systemctl restart "$service"
            ;;
        openrc)
            rc-service "$service" restart
            ;;
        runit)
            sv restart "$service"
            ;;
        s6)
            s6-rc -d change "$service" && s6-rc -u change "$service"
            ;;
        dinit)
            dinitctl restart "$service"
            ;;
        *)
            info "Unknown init system, skipping restart for $service"
            ;;
    esac
}

DISTRO=$(detect_distro)
INIT_SYSTEM=$(detect_init)

info "Vase Post-Install: V: 0.1.32"
echo ""
echo "System Information:"
info "DISTRO=$DISTRO"
info "INIT_SYSTEM=$INIT_SYSTEM"
echo ""
echo "General Configuration:"
info "SCRIPT_DIR=$SCRIPT_DIR"
info "SUDO_USER=$TARGET_USER"
echo ""
echo "Guest User Configuration:"
info "CREATE_GUEST=$CREATE_GUEST"
if [ "$CREATE_GUEST" = "true" ]; then
    info "GUEST_USERNAME=$USERNAME"
    info "GUEST_USE_PASSWORD=$GUEST_USE_PASSWORD"
    info "GUEST_SHELL=$GUEST_SHELL"
    info "GUEST_SUDO=$GUEST_SUDO"
    info "Guest will have: Audio, Video, Games, Power, Optical, Storage, Scanner access"
    if [ "$GUEST_SUDO" = "true" ] && [ "$GUEST_USE_PASSWORD" = "true" ]; then
        info "Guest will have: Sudo privileges (password required)"
    else
        info "Guest will NOT have: Sudo privileges"
    fi
    info "Guest will NOT have: Direct access to $TARGET_USER files unless given sudo rights."
else
    info "No guest user will be created"
fi
if ls "$SCRIPT_DIR"/install-*.log 1> /dev/null 2>&1; then
    info "Vase post-install appears to be already run (found existing install log)"
    die "Aborted. Remove install logs to force reinstall."
fi
### Confirmation prompt
read -p "Continue with these settings? (y/N): " -n 1 -r
echo
if [ "$REPLY" != "y" ] && [ "$REPLY" != "Y" ]; then
  die "Aborted."
  exit 1
fi
echo ""
########################################## Edge cases
info "Checking target user..." 
## Check the target user is correct
if [ ! -d "/home/$TARGET_USER" ]; then
    die "Home directory for user '$TARGET_USER' does not exist"
    exit 1
fi
# Check if running as root
info "Checking elevated privileges..." 
if [ "$EUID" -ne 0 ]; then
    die "This script must be run as root"
    exit 1
fi
info "Checking pacman access..." 
if ! pacman -Sy; then
    die "Failed to sync package databases are you connected to internet?"
    exit 1
else
    pacman -Syu --noconfirm ## Make sure we updated any packages that were out of sync
fi
exec > >(tee -a "$LOG_FILE")
exec 2>&1
# Start logging later (after pre-checks)
########################################## Essentials + specified
info "Setting up Base..." 
pacman -S --noconfirm --needed tree jq less alsa-utils python-gobject pacman-contrib vte4 gtk4 libadwaita $ADD_PKGS $LG_PACKS
########################################## DIRS
info "Setting up Dirs..." 
## Admin/User
mkdir -p "$HOME/.config"
mkdir -p "$HOME/.config/zsh"
mkdir -p "$HOME/.config/bash"
mkdir -p "$HOME/.local/bin"
## User only
mkdir -p "/home/$TARGET_USER/.local/share/konsole"
mkdir -p "/home/$TARGET_USER/.config/zsh"
mkdir -p "/home/$TARGET_USER/.config/bash"
mkdir -p "/home/$TARGET_USER/.local/bin"

#mkdir -p "/home/$TARGET_USER/Work" && echo -e "[Desktop Entry]\nIcon=folder-script" > "/home/$TARGET_USER/Work"
##Optional home folders with icons

########################################## UFW
info "Setting up UFW..."
pacman -S --noconfirm --needed ufw
ufw default deny incoming
ufw allow out 443            # https
ufw allow 22                 # sftp/ssh
ufw enable
enable_service ufw
########################################## Power profiles
info "Setting up Power..."
if cat /sys/class/power_supply/BAT*/present 2>/dev/null | grep -q 1; then
    info "Detected laptop - configuring power management..."

    # power-profiles-daemon is systemd-only
    if [ "$INIT_SYSTEM" = "systemd" ]; then
        pacman -S --noconfirm power-profiles-daemon
        enable_service power-profiles-daemon.service
    else
        # For non-systemd, install tools but user must configure manually
        # power-profiles-daemon requires some setyp
        pacman -S --noconfirm power-profiles-daemon
        info "Note: power-profiles-daemon requires manual service setup for $INIT_SYSTEM"
    fi
else
    info "Detected desktop/server."
    pacman -S --noconfirm cpupower
    enable_service cpupower
    # Set performance governor if available
    cpupower frequency-set -g performance || info "Could not set performance governor (may not be supported)"
fi
########################################## CREATE THE KONSOLE PROFILES
info "Setting up Konsoles..." 
# Install ZSH + plugins
pacman -S --noconfirm --needed zsh \
                      zsh-autosuggestions \
                      zsh-syntax-highlighting \
                      bash-completion

## Add to shells
grep -qxF '/usr/bin/zsh' /etc/shells || echo '/usr/bin/zsh' >> /etc/shells

#chsh -s /usr/bin/zsh $TARGET_USER
## Uncomment above if you want built-in to be zsh, i prefer keeping bash built-in

########################################## Custom Localbin
info "Setting up Localbin..." 
## Add local bin to PATH if it exists
cat > "$HOME/.config/environment" << 'EOF'
if [ -d "$HOME/.local/bin" ] && [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
  export PATH="$HOME/.local/bin:$PATH"
fi
EOF
########################################## Example script iapps search in installed packages. 
cat > "$HOME/.local/bin/iapps" << 'EOF'
#!/bin/sh
# this script lets you search your installed packages easily
if [ -z "$1" ]; then
    echo "Missing search term"
    exit 1
fi
pacman -Qs "$1"
EOF
chmod +x "$HOME/.local/bin/iapps"
########################################## SHARED (BASH & ZSH) ALIASES
info "Setting up Aliases..." 
cat > "$HOME/.config/aliases" << EOF
alias comms="cat ~/.config/aliases | sed 's/alias//g'"
alias ecomms="vim ~/.config/aliases"
alias srcall=". ~/.config/aliases"
alias topac="vim /etc/pacman.conf"
# Root alias
alias cdu="cd /home/$TARGET_USER/"
alias aus="su $TARGET_USER" 
# Utils alias
alias wztree="du -h / | sort -rh | head -n 30 | less"
alias wzhere="du -h . | sort -rh | head -n 30 | less"
alias genpw="head /dev/urandom | tr -dc A-Za-z0-9 | head -c 21; echo"
alias logd="journalctl -f" 
alias logds="dmesg -r"
alias birth="stat /"
# Pac alias
alias updapc="pacman -Syu"
alias apkorph="pacman -Rns $(pacman -Qdtq)"
alias manypk="pacman -Q | wc -l"
alias apka="pacman -S"
alias apkd="pacman -R"
alias apks="pacman -Ss"
# Practical alias
alias sudo='sudo ' 
alias clr="clear"
alias cls="clr"
alias ls='ls --color=auto'
alias ll='ls --color=auto -la'
alias la='ls --color=auto -a'
alias l='ls --color=auto -CF'
alias grep='grep --color=auto'
EOF
########################################## BASH CONFIGURATION
info "Setting up Bash..." 
cat > "$HOME/.config/bash/bashrc" << 'EOF'
# === Custom Bash Prompt Blue ===
export PS1='\[\033[1;34m\]┌──[\[\033[0;36m\]\A\[\033[1;34m\]]─[\[\033[0m\]\u\[\033[1;34m\]@\[\033[0;36m\]\h\[\033[1;34m\]]─[\[\033[0;32m\]\w\[\033[1;34m\]]\n\[\033[1;34m\]└──╼ \[\033[0;36m\]$ \[\033[0m\]'

# === Source common aliases ===
if [ -f "$HOME/.config/aliases" ]; then
    . "$HOME/.config/aliases"
fi

# === Source environment file ===
if [ -f "$HOME/.config/environment" ]; then
    . "$HOME/.config/environment"
fi
# === Enable bash completion ===                                                 
if [ -f /usr/share/bash-completion/bash_completion ]; then                    
    . /usr/share/bash-completion/bash_completion 
fi
EOF
touch "$HOME/.bashrc"
echo '. "$HOME/.config/bash/bashrc"' >> "$HOME/.bashrc"
########################################## ZSH 
info "Setting up ZSH..." 
cat > "$HOME/.config/zsh/zshrc" << 'EOF'
# === Load Extra Completions ===
if [ -d "/usr/share/zsh/site-functions" ]; then
    fpath+=("/usr/share/zsh/site-functions")
fi

# === History Configuration ===
HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.zsh_history

# === Source Zsh Plugins (with error checking) ===
# Load autosuggestions and history-substring-search first
if [ -f "/usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh" ]; then
    . "/usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh"
else
    echo "Warning: zsh-autosuggestions plugin not found"
fi

# Load syntax-highlighting last as recommended
if [ -f "/usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" ]; then
    . "/usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
else
    echo "Warning: zsh-syntax-highlighting plugin not found"
fi
# === Correction ===
setopt CORRECT CORRECT_ALL
# Can be set to just correct if don't want arg correction

# === VCS Info Configuration ===
autoload -Uz vcs_info
setopt prompt_subst

# Configure vcs_info formats
zstyle ':vcs_info:*' enable git
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' unstagedstr '%F{red}*%f'
zstyle ':vcs_info:*' stagedstr '%F{green}+%f'
zstyle ':vcs_info:git:*' formats '%F{red}─[%F{yellow}git:%F{green}%b%c%u%F{red}]'
zstyle ':vcs_info:git:*' actionformats '%F{red}─[%F{yellow}git:%F{green}%b%F{red}|%a%c%u%F{red}]'

# Update vcs_info before each prompt
precmd() { vcs_info }

# === Custom Zsh Prompt Red with VCS Info ===
export PROMPT='%F{red}┌──[%F{cyan}%D{%H:%M}%F{red}]─[%F{default}%n%F{red}@%F{cyan}%m%F{red}]─[%F{green}%~%F{red}]${vcs_info_msg_0_}
%F{red}└──╼ %F{cyan}$ %f'

# === Source common aliases ===
if [ -f "$HOME/.config/aliases" ]; then
    . "$HOME/.config/aliases"
fi

# === Source environment file ===
if [ -f "$HOME/.config/environment" ]; then
    . "$HOME/.config/environment"
fi
EOF
## Add source line
touch "$HOME/.zshrc"
echo '. "$HOME/.config/zsh/zshrc"' >> "$HOME/.zshrc"

# Create user's shell rc files
touch "/home/$TARGET_USER/.zshrc"
echo '. "$HOME/.config/zsh/zshrc"' >> "/home/$TARGET_USER/.zshrc"

touch "/home/$TARGET_USER/.bashrc"
echo '. "$HOME/.config/bash/bashrc"' >> "/home/$TARGET_USER/.bashrc"
########################################## USER SHELL SETUP
info "Setting up Root..."
# Copy shell configs to user
cp "$HOME/.config/zsh/zshrc" "/home/$TARGET_USER/.config/zsh/zshrc"
cp "$HOME/.config/bash/bashrc" "/home/$TARGET_USER/.config/bash/bashrc"
cp "$HOME/.config/aliases" "/home/$TARGET_USER/.config/aliases"
cp "$HOME/.config/environment" "/home/$TARGET_USER/.config/environment"

# Copy local bin for usr
cp "$HOME/.local/bin/iapps" "/home/$TARGET_USER/.local/bin/iapps"
########################################## Fp
info "Setting up Flatpak..."
pacman -S --noconfirm --needed flatpak
if [ -n "$ADD_FP" ]; then
    info "Installing desired Flatpaks..."
    for pkg in $ADD_FP; do
        sudo -u $TARGET_USER flatpak install -y flathub "$pkg" || info "Failed to install $pkg"
    done
fi
info "Changing ownerships..." 
# Fix ownership all files recursively
chown -R $TARGET_USER:$TARGET_USER /home/$TARGET_USER/
########################################## User visual settings

########################################## Guest
if [ "$CREATE_GUEST" = "true" ]; then
    info "Setting up guest User..."
    
    # Prompt for guest password with confirmation if enabled
    if [ "$GUEST_USE_PASSWORD" = "true" ]; then
        while true; do
            echo ""
            read -s -p "Enter password for guest user: " GUEST_PASSWORD
            echo ""
            if [ -z "$GUEST_PASSWORD" ]; then
                echo "Password cannot be empty when GUEST_USE_PASSWORD=true. Set GUEST_USE_PASSWORD=false for no password."
                continue
            fi
            read -s -p "Confirm password: " GUEST_PASSWORD_CONFIRM
            echo ""
            if [ "$GUEST_PASSWORD" = "$GUEST_PASSWORD_CONFIRM" ]; then
                break
            else
                echo "Passwords do not match. Please try again."
            fi
        done
    fi
    
    # Check if user already exists
    if id "$USERNAME" &>/dev/null; then
        info "User $USERNAME already exists. Skipping creation."
    else
        # Create user with selected shell
        useradd -s "$GUEST_SHELL" "$USERNAME"
        info "Guest user created with shell: $GUEST_SHELL"
        
        # Add to necessary groups for KDE functionality
        if [ "$GUEST_SUDO" = "true" ] && [ "$GUEST_USE_PASSWORD" = "true" ]; then
            usermod -aG audio,video,games,power,optical,storage,scanner,lp,network,wheel "$USERNAME"
            # Ensure wheel group has sudo access
            if ! grep -q "^%wheel.*ALL=(ALL:ALL) ALL" /etc/sudoers; then
                echo "%wheel ALL=(ALL:ALL) ALL" >> /etc/sudoers
            fi
            info "Guest user added to wheel group for sudo access"
        else
            usermod -aG audio,video,games,power,optical,storage,scanner,lp,network "$USERNAME"
        fi

        # Set password based on configuration
        if [ "$GUEST_USE_PASSWORD" = "true" ] && [ -n "$GUEST_PASSWORD" ]; then
            echo "$USERNAME:$GUEST_PASSWORD" | chpasswd
            info "Guest user created with password"
        else
            passwd -d "$USERNAME"
            info "Guest user created with no password"
        fi
        
        # Clone entire home directory
        info "Cloning $TARGET_USER home directory to guest..."
        cp -r "/home/$TARGET_USER" "/home/$USERNAME"

        # Remove desktop shortcut/System files if user is not sudo
        if [ "$GUEST_SUDO" = "false" ]; then
            rm -f /home/$USERNAME/Desktop/PACTOPAC.desktop
            rm -rf /home/$USERNAME/Vase/
        fi
        # Fix ownership
        chown -R "$USERNAME:$USERNAME" "/home/$USERNAME"
        chmod 755 "/home/$USERNAME"
        
        info "Guest user setup complete with cloned home directory"
    fi
fi

########################################## SYSTEM HARDENING
info "Setting up Security..." 
## Not a router stuff / Others
cat > /etc/sysctl.d/99-custom-harden.conf << 'EOF'
# Network performance and security
net.core.rmem_max = 16777216
net.core.wmem_max = 16777216
net.ipv4.tcp_rmem = 4096 87380 16777216
net.ipv4.tcp_wmem = 4096 65536 16777216
net.ipv4.tcp_congestion_control = bbr
net.ipv4.tcp_fastopen = 3
net.ipv4.tcp_mtu_probing = 1
net.core.default_qdisc = fq
net.ipv4.tcp_window_scaling = 1
net.ipv4.tcp_timestamps = 1
net.ipv4.tcp_sack = 1

# Security settings
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.default.rp_filter = 1
net.ipv4.tcp_syncookies = 1
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.secure_redirects = 0
net.ipv4.conf.default.secure_redirects = 0

# Enable IPv6 privacy extensions
net.ipv6.conf.all.use_tempaddr = 2
net.ipv6.conf.default.use_tempaddr = 2

# Process security
kernel.dmesg_restrict = 1
kernel.kptr_restrict = 2
kernel.yama.ptrace_scope = 1

# Performance tweaks
kernel.sched_autogroup_enabled = 0

# Memory management
vm.swappiness = 10
vm.vfs_cache_pressure = 50
vm.dirty_ratio = 15
vm.dirty_background_ratio = 5
EOF

## Apply settings
sysctl --system >/dev/null 2>&1
########################################## Rem
if [ -n "$REM_PKGS" ]; then
    info "Removing Optionals..." 
    pacman -R --noconfirm $REM_PKGS
fi
########################################## Exit reboot
echo ""

cat << EOF
##################################################################################################################################################
                                                                                                                                                  
                                                       ▒▒▒▓▓▒░░                                                                                    
                                                      ▓▓  ░░  ░░                                                                                  
                                                  ▒▒▓▓▓▓    ░░  ▒▒                           #########                                                     
                                              ░░▓▓▓▓▓▓░░    ░░    ▒▒                         # 8611m #                                                 
                                           ▓▓█▓▓▓▓▓     ░    ░░    ░░▓▓▒▒█                   #########                                                     
                                        ▒▒▓▓▓█▓▓█▓▒▒          ▒▒      ▓▓▓█▓▓▒▒               # K2-OS #                                                    
                                        ▓▓▓█▓▓▒▒▓█▓▓          ░░▒▒    ░░▓▓▓▓▓▓░░             #########                                                    
                                      ░░▓█▓▓▒▒▒▓▓▓▓█▒▒       ░  ▒▒░░    ░░▓▓█▓                                          ▒█▒▓▒▒                    
                                     █▓█▓▓▓▓▒▒▓▓▓▓█▓▓▓▓▓        ▒▒░░      ▒▒▓▓░░▒▒                                    ▓▓▓▓    ▒▒                  
                                ▒▒▓▓▓▓▓▓█▓▒▒▒▒▒▓▓▓▓█▓▓▓▓░░    ░░▒▒▒▒   ░    ▓█▓▓  ▒                                 ▓▓▓█▓▓  ░   ░                  
                          ░░▒▒▓▓▓▓█▓▓█▓▓▒▒▒▒▒░▓▓▓▓█▓▓▓▓▓▒▒    ░░▒▒▒▒░░      ▒▒█▓░░░░ ▒                            ▒▒▓▓▓▓▒▓░░  ░░▒▒                
                      ▓▓▓▓█▓▓▓▓▓▓▓▓█▒▒▒▒▒▒░▓▓▓▓▓██▓▓▓▓▓▓▓      ▒▒░░▒▒░░      ▓▓█▓▒▒    ░░                      ▓▓▓▓▓▓▓▒▓▓▓▓  ░░  ░░░░            
                  ▓▓▓▓▓█▓▓▒▒▓█▓▓▒▒▒▒▒▒▒▒▒▒▓▓▓██▓█▓▓▓▓▓▓▓▓▓   ░  ░░▒▒▒▒▒▒   ░  ▒▒█▓▓▓      ▒▒                  ▓▓▓▓▓▓▒▒▓▓▓▓▓▓    ░░  ░ ▓▓          
                  ▓▓▓▓█▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓█▓▓█▓▓▓▓▓▓▓▓▓▓▒▒      ░░▒▒▒▒      ░░▓▓█▓░░   ▒  ░░            ░░▓▓▓█▓▓▒▓▓▓▓▓▓▓▓█    ▒▒    ░  ░         
                ▓▓█▓█▓▒▒▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▓█▓▓██▓▓█░▒▓▓▓▓▓▓▓▓▓▓▒▒      ▒▒▒▒     ░  ▓▓█▓▒▒  ░   ░░░░        ▒▒▓▓▓█▓▓▓▓▒▒▓▓▓▓▒█▓▓░   ░░ ░    ▒▒        
            ▓▓████████▓▓▒▒▓▓▓▓▓▓▓▓▓▓█░███▓████▓░████▓▓▓▓▓▓▓▓▓▓      ░░▒▒▒▒      ░░██▓▓       ▒  ░░▒▒▒▒▓▓▓▓▓█▓▓▓▓▒▒▓▓▓▓▓▒█▓▓▓      ▒▒░░    ░░      
          ████████████▓▓▓▓▓▓▓▓▓▓█▓░███▓▓████░▓████████▓▓▓▓▓▓▓▓░░▒▒▓▓▒▒▒▒▒▒░░      ▓▓██▒▒░░░░    ░░▒▒▓▓▓████▓▓▓▓▓▓▓▒▒▓▒▓▓████▓▓░░  ▒▒▓▓▒▒░░  ░░▓▓    
        ▓▓████████▓▓▓▓▓▓▓▓▓▓██▓▓░░██████████████████▓▓▓█▓▒▒▒▓▓▓▓▓▓░▓▓▓▓░▓▓▓▒▒░░░░  ██▓▓▓▓▓▓▓▓▓░▓▓▓▓███▓█████▓▓▒▒▒▒▓▓██▒███████▓▓░░▓▓░▓▓▓▓░▓░▓▓▓▓░░  
  ▒▒████████████▓▓▓▓██▓▓██████████████▓████████████▓▒▒▓▓███▓▓▓▓▓▓▓▓░▓▓▓▓▓▓▓▓▓░░▓▓░▓▓▓▓░▓▓▓▓░▓▓▓▓▓████▓▓███▓▓▓▓█████████▒███████▓▓▓▓▓▓▓▓▓▓▓▓▓▓░▓▓▓▓
███▓██████████▓▓██████████████████████████████████▓█▓▓▓▓██▓▓▓▓▓▓▓▓▓░░▓▓▓▓░▓▓▓▓░▓▓▓▓▓▓▓▓▓▓░▓▓▓▓▓▓████▓███▓▓▓▓▓▓███████████▒██████░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
█▓████████▓▓██████████████████████████████████████████▓▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░▓▓▓░░▓▓▓▓▓▓▓▓░▓▓▓███▓████▓▓▓▓▓▓█████████████▓▒███████░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
▓███████▓▓███████████████████████████████████████▓████▓▓▓▓▓▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░▓▓▓░░▓▓▓░▓▓▓▓█▓██████▓▓▓▓▓▓▓▓█████████████████▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
██████▓▓███████████████████████▓████████████████████████▓▓▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓█████▓▓▓▓▓▓▓▓▓█████████████████████▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
█████████████████████████████████████████████▓██████████▓▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓██████▓▓▓▓▓▓▓▓████████████████████████▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
██████████████████████████████████████████▓█████████████▓▓▓▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓██████▓▓▓▓▓▓██▓▓██████████████████████████▓▓▓▓▓▓▓▓▓▓▓▓▓▓
████████████████████████████▓█████████████████████████████▓▓▓▓▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓████████▓▓▓▓██████████████████████████████████▓▓▓▓▓▓▓▓▓▓▓▓
████████▓█████████▓▓████████████████████████████████████▓▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓████████▓▓▓▓██████████████████████▓███████████████████▓▓▓▓▓▓
█████▓████████████▓▓▓▓██████████████████████████████████▓▓▓▓▓▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓██████▓▓███████████▓████████████████████████████████████▓▓▓▓
███▓▓█████████████▓▓▓▓██████████████████████████████████▓▓▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓██████▓▓██▓▓██████████████████████████████████████████▓▓▓▓▓▓▓▓
█▓████████████████▓▓▓▓▓▓▓▓██████████████████████████████▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓██████▓▓██████████████████████████████████████████████████▓▓▓▓▓▓
▓██████████████▓▓██▓▓▓▓▓▓▓▓▓▓██▓▓▓▓███████████████▓██▓▓▓▓██▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓█████████▓▓█████████▓████████████████████████████████████████████▓▓▓▓
██████████████▓▓████▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓████████████████▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓█████████▓██████████████▓██████████████████████████▓██████████████████▓▓
██████████▓▓████████▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓████████▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓███████████████████████████▓█████████████████████████████████▓▓███████████

##################################################################################################################################################
EOF

echo ""
info "ALL DONE! Welcome."
info "Install completed successfully at $(date)" >> "$LOG_FILE"
info "Log saved to: $LOG_FILE"
echo ""
echo "Installation complete! Please REBOOT when ready for all changes to take effect."
echo "Restarting display manager in 5 seconds..."
sleep 5
restart_service gdm
